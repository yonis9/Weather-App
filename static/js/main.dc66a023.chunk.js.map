{"version":3,"sources":["redux/app/app-selectors.js","redux/home/home-types.js","redux/home/home-actions.js","redux/app/app-types.js","redux/app/app-actions.js","components/NavBar/NavBar.js","components/ToggleDayNight/ToggleDayNight.js","components/SearchField/SearchField.js","redux/home/home-selectors.js","redux/favorites/favorites-selectors.js","components/ToggleUnit/ToggleUnit.js","redux/favorites/favorites-types.js","components/ToggleFavorite/ToggleFavorite.js","redux/favorites/favorites-actions.js","components/DayCard/DayCard.js","components/DayList/DayList.js","components/CurrentWeather/CurrentWeather.js","components/Home/Home.js","components/FavCard/FavCard.js","components/FavList/FavList.js","components/Favorites/Favorites.js","components/ErrorBoundary/ErrorBoundry.js","components/Footer/Footer.js","containers/App.js","redux/home/home-reducer.js","redux/home/location-data.js","redux/app/app-reducer.js","redux/favorites/favorites-utils.js","redux/favorites/favorites-reducer.js","redux/root-reducer.js","redux/store.js","serviceWorker.js","index.js"],"names":["selectApp","state","app","selectIsCelsius","createSelector","isCelsius","selectLightBackground","lightBackground","selectRoute","route","homeActionTypes","CHANGE_LOCATION","TOGGLE_FAVORITE","REQUEST_SEARCH_START","REQUEST_SEARCH_SUCCESS","REQUEST_SEARCH_FAILED","REQUEST_FORCAST_START","REQUEST_FORCAST_SUCCESS","REQUEST_FORCAST_FAILED","setLocation","location","type","payload","appActionTypes","TOGGLE_UNIT","TOGGLE_DAY_NIGHT","CHANGE_ROUTE","changeRoute","connect","disptach","onClick","dispatch","toggleDayNight","className","searchOutputs","home","getSearchOutput","e","text","target","value","fetch","process","then","response","json","data","catch","error","id","Autocomplete","options","getOptionLabel","option","LocalizedName","Country","onChange","event","style","width","renderInput","params","TextField","label","variant","fullWidth","selectHome","selectLocation","selectWeather","weather","selectFavorites","favorites","selectIsFavorite","Boolean","find","f","Key","favoritesWeather","toggleUnit","favoritesActionTypes","GET_FAVORITES_WEATHER_START","GET_FAVORITES_WEATHER_SUCCESS","GET_FAVORITES_WEATHER_FAILED","isFavorite","toggleFavorite","locationObj","icon","faStar","size","DayCard","day","date","minTemp","maxTemp","tempUnit","toString","length","alt","src","DayList","fiveDayForcast","DailyForecasts","map","i","key","Math","round","Temperature","Minimum","Value","Maximum","Unit","Day","Icon","Date","EpochDate","slice","getForcast","cityKey","currentConditions","WeatherIcon","useEffect","WeatherText","Metric","Imperial","Headline","Text","Home","name","country","weatherText","temp","onFavCardClick","city","getFavoritesWeather","favoritesList","promises","Promise","all","results","ErrorBoundry","props","hasError","info","this","setState","children","Component","Footer","href","rel","faGithub","faLinkedin","document","getElementsByTagName","backgroundColor","color","getGeolocation","navigator","geolocation","getCurrentPosition","requestGeolocation","position","lat","coords","latitude","lon","longitude","INITIAL_STATE","Version","Type","Rank","ID","AdministrativeArea","isPending","homeReducer","action","appReducer","handleFavorite","favoriteItem","arrayOfFavorites","filter","favoritesReducer","persistConfig","storage","whitelist","rootReducer","combineReducers","persistReducer","middlewares","thunkMiddleware","store","createStore","persistedReducer","applyMiddleware","persistor","persistStore","window","hostname","match","require","config","ReactDOM","render","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dc66a023.chunk.js","sourcesContent":["import { createSelector } from 'reselect';\r\n\r\nexport const selectApp = state => state.app\r\n\r\nexport const selectIsCelsius = createSelector(\r\n    selectApp,\r\n    app => app.isCelsius\r\n)\r\n\r\nexport const selectLightBackground = createSelector(\r\n    selectApp,\r\n    app => app.lightBackground\r\n)\r\n\r\nexport const selectRoute = createSelector(\r\n    selectApp,\r\n    app => app.route\r\n)","const homeActionTypes = {\r\n    CHANGE_LOCATION: 'CHANGE_LOCATION',\r\n    TOGGLE_FAVORITE: 'TOGGLE_FAVORITE',\r\n    REQUEST_SEARCH_START: 'REQUEST_SEARCH_START',\r\n    REQUEST_SEARCH_SUCCESS: 'REQUEST_SEARCH_SUCCESS',\r\n    REQUEST_SEARCH_FAILED: 'REQUEST_SEARCH_FAILED',\r\n    REQUEST_FORCAST_START: 'REQUEST_FORCAST_START',\r\n    REQUEST_FORCAST_SUCCESS: 'REQUEST_FORCAST_SUCCESS',\r\n    REQUEST_FORCAST_FAILED: 'REQUEST_FORCAST_FAILED'\r\n}\r\n\r\nexport default homeActionTypes;\r\n\r\n","import homeActionTypes from './home-types';\r\n\r\nexport const setLocation = (location) => ({\r\n    type: homeActionTypes.CHANGE_LOCATION,\r\n    payload: location\r\n})\r\n\r\nexport const getSearchOutput = (text) => (dispatch) => {\r\n   \r\n    dispatch({type: homeActionTypes.REQUEST_SEARCH_START});\r\n    fetch(`https://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=${process.env.REACT_APP_API_KEY}&q=${text}&language=en-us`)\r\n    .then(response => response.json())\r\n    .then(data => dispatch({type: homeActionTypes.REQUEST_SEARCH_SUCCESS, payload: data}))\r\n    .catch(error => dispatch({type: homeActionTypes.REQUEST_SEARCH_FAILED, payload: error}))\r\n}\r\n\r\n\r\nexport const getForcast = (cityKey, isCelsius) => dispatch => {\r\n    dispatch({ type: homeActionTypes.REQUEST_FORCAST_START });\r\n    fetch(`https://dataservice.accuweather.com/forecasts/v1/daily/5day/${cityKey}?apikey=${process.env.REACT_APP_API_KEY}&details=false&metric=${isCelsius}`)\r\n    .then(response => response.json())\r\n    .then(fiveDayForcast => {\r\n      fetch(`https://dataservice.accuweather.com/currentconditions/v1/${cityKey}?apikey=${process.env.REACT_APP_API_KEY}`)\r\n      .then(response => response.json())\r\n      .then(currentConditions => dispatch({ \r\n          type: homeActionTypes.REQUEST_FORCAST_SUCCESS,\r\n           payload:{ fiveDayForcast, currentConditions }\r\n        })\r\n        )\r\n    })\r\n    .catch(error => dispatch({type: homeActionTypes.REQUEST_FORCAST_FAILED, payload: error}))\r\n}","const appActionTypes= {\r\n    TOGGLE_UNIT: 'TOGGLE_UNIT',\r\n    TOGGLE_DAY_NIGHT: 'TOGGLE_DAY_NIGHT',\r\n    CHANGE_ROUTE: 'CHANGE_ROUTE'\r\n}\r\n\r\nexport default appActionTypes;","import appActionTypes from './app-types'\r\n\r\nexport const toggleUnit = () => ({\r\n    type: appActionTypes.TOGGLE_UNIT\r\n})\r\n\r\nexport const toggleDayNight = () => ({\r\n    type: appActionTypes.TOGGLE_DAY_NIGHT\r\n})\r\n\r\nexport const changeRoute = (route) => ({\r\n    type: appActionTypes.CHANGE_ROUTE,\r\n    payload: route\r\n})","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport './NavBar.css'\r\n\r\nimport { changeRoute } from '../../redux/app/app-actions';\r\n\r\nconst NavBar = ( { changeRoute }) => {\r\n    return (\r\n        <nav>\r\n            <h3>Weather App</h3>\r\n            <ul>\r\n                <li onClick={()=> changeRoute('home')}>HOME</li>\r\n                <li onClick={()=> changeRoute('favorites')}>FAVORITES</li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = disptach => ({\r\n    changeRoute: (route) => disptach(changeRoute(route))\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(NavBar);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { toggleDayNight } from '../../redux/app/app-actions';\r\n\r\nconst ToggleDayNight = ({ toggleDayNight }) => {\r\n    return (\r\n      <label className=\"switch\">\r\n        <input type=\"checkbox\" onClick={toggleDayNight}/>\r\n        <span className=\"slider round\" ></span>\r\n      </label>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  toggleDayNight: () => dispatch(toggleDayNight())\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(ToggleDayNight);","import React  from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete'\r\n\r\nimport { getSearchOutput, setLocation } from '../../redux/home/home-actions'\r\n\r\n\r\nimport './SearchField.css';\r\n\r\nconst SearchField = ({ getSearchOutput, searchOutputs, setLocation }) => {\r\n\r\n\r\n\r\n    return (\r\n        <div id='search-con'>\r\n            \r\n        <Autocomplete\r\n        id=\"combo-box-demo\"\r\n        options={searchOutputs}\r\n        getOptionLabel={option => option.LocalizedName +', ' +option.Country.LocalizedName}\r\n        onChange={(event, value) => setLocation(value)}\r\n        style={{ width: '50%' }}\r\n        renderInput={params => (\r\n            <TextField {...params} label=\"Choose your location\" variant=\"outlined\" fullWidth onChange={getSearchOutput}/>\r\n        )}\r\n        />\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = ({ home }) => ({\r\n    searchOutputs: home.searchOutputs\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    getSearchOutput: (e) => dispatch(getSearchOutput(e.target.value)),\r\n    setLocation: (location) => dispatch(setLocation(location))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchField);","import { createSelector } from 'reselect'\r\n\r\nexport const selectHome = state => state.home\r\n\r\nexport const selectLocation = createSelector(\r\n    selectHome,\r\n    home => home.location\r\n)\r\n\r\nexport const selectSearchOutputs = createSelector(\r\n    selectHome,\r\n    home => home.searchOutputs\r\n)\r\n\r\nexport const selectWeather = createSelector(\r\n    selectHome,\r\n    home => home.weather\r\n)","import { createSelector } from 'reselect'\r\n\r\nimport { selectLocation } from '../home/home-selectors'\r\n \r\nexport const selectFavorites = state => state.favorites.favorites;\r\n \r\n\r\nexport const selectIsFavorite = createSelector(\r\n    [selectFavorites, selectLocation],\r\n    (favorites, location) => Boolean(favorites.find(f => f.Key === location.Key))\r\n)\r\n\r\nexport const selectFavoritesWeather = createSelector(\r\n    selectFavorites,\r\n    favorites => favorites.favoritesWeather\r\n)\r\n","import React from 'react';\r\nimport { connect } from 'react-redux'\r\n\r\nimport { toggleUnit } from '../../redux/app/app-actions';\r\n\r\nconst ToggleUnit = ({ isCelsius, toggleUnit }) => (\r\n    <h3  className='toggle-unit'onClick={toggleUnit}>\r\n        {isCelsius ? 'C' : 'F'}\r\n    </h3>\r\n);\r\n\r\nconst mapStateToProps = ({ app }) => ({\r\n    isCelsius: app.isCelsius\r\n})\r\n\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    toggleUnit: () => dispatch(toggleUnit())\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ToggleUnit);","const favoritesActionTypes = {\r\n    TOGGLE_FAVORITE: 'TOGGLE_FAVORITE',\r\n    GET_FAVORITES_WEATHER_START: 'GET_FAVORITES_WEATHER_START',\r\n    GET_FAVORITES_WEATHER_SUCCESS: 'GET_FAVORITES_WEATHER_SUCCESS',\r\n    GET_FAVORITES_WEATHER_FAILED: 'GET_FAVORITES_WEATHER_FAILED'\r\n}\r\n\r\nexport default favoritesActionTypes;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { toggleFavorite } from '../../redux/favorites/favorites-actions'\r\nimport { selectIsFavorite } from '../../redux/favorites/favorites-selectors';\r\nimport { selectLocation } from '../../redux/home/home-selectors'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faStar } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst ToggleFavorite = ({ toggleFavorite, isFavorite, location }) => (\r\n    <div onClick={() => toggleFavorite(location)}>\r\n        <FontAwesomeIcon \r\n        icon={faStar} \r\n        size=\"2x\" \r\n        className={`${isFavorite ? 'star favorite' : 'star'}`}  \r\n        />\r\n    </div>\r\n)\r\n\r\nconst mapStateToProps = state => ({\r\n    location: selectLocation(state),\r\n    isFavorite: selectIsFavorite(state),\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    toggleFavorite: (locationObj) => dispatch(toggleFavorite(locationObj))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ToggleFavorite);","import favoritesActionTypes from './favorites-types';\r\n\r\nexport const toggleFavorite = (locationObj) => ({\r\n    type: favoritesActionTypes.TOGGLE_FAVORITE,\r\n    payload: locationObj\r\n})\r\n\r\nexport const getFavoritesWeather = (favoritesList) => dispatch =>  {\r\n    dispatch({ type: favoritesActionTypes.GET_FAVORITES_WEATHER_START })\r\n    if (!favoritesList.length) {\r\n        dispatch({ type: favoritesActionTypes.GET_FAVORITES_WEATHER_SUCCESS, payload: []})\r\n    } else {\r\n        const promises = favoritesList.map(\r\n            f => fetch(`https://dataservice.accuweather.com/currentconditions/v1/${f.Key}?apikey=${process.env.REACT_APP_API_KEY}`)\r\n            .then(response => response.json()));\r\n  \r\n             Promise.all(promises)\r\n            .then(results => {\r\n              return results.map((data ,i) => ({\r\n                id: favoritesList[i].Key,\r\n                name: favoritesList[i].LocalizedName,\r\n                country: favoritesList[i].Country.LocalizedName,\r\n                weatherText: data[0].WeatherText,\r\n                icon: data[0].WeatherIcon,\r\n                temp: data[0].Temperature\r\n              })\r\n              )\r\n           })\r\n           .then(results => \r\n            dispatch({\r\n               type: favoritesActionTypes.GET_FAVORITES_WEATHER_SUCCESS,\r\n                payload: results\r\n            })\r\n            )\r\n           .catch(error => \r\n            dispatch({ \r\n                type: favoritesActionTypes.GET_FAVORITES_WEATHER_FAILED,\r\n                 payload: error\r\n                })\r\n            )\r\n    }\r\n}","import React from 'react';\r\nimport '../DayCard/DayCard.css'\r\n\r\nconst DayCard = ({ day, date, minTemp, maxTemp, tempUnit, icon}) => {\r\n    icon.toString().length < 2 ? icon = '0'+icon : icon = icon;\r\n    return (\r\n        <div className='card'>\r\n            <div className='date'>\r\n                <h4>{day}</h4>\r\n                <h4>{date}</h4>\r\n            </div>\r\n            <img alt='icon' src={`https://developer.accuweather.com/sites/default/files/${icon}-s.png`}/>\r\n            <h4>{maxTemp}°/{minTemp}° {tempUnit}</h4>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default DayCard;","import React from 'react';\r\nimport DayCard from '../DayCard/DayCard';\r\nimport './DayList.css';\r\n\r\nconst DayList = ({ fiveDayForcast }) => {\r\n    return (\r\n        <div id='daylist'>\r\n    {        fiveDayForcast.DailyForecasts.map((day,i) => {\r\n            return (\r\n                <DayCard key={i}\r\n                         minTemp={Math.round(day.Temperature.Minimum.Value)}\r\n                         maxTemp={Math.round(day.Temperature.Maximum.Value)}\r\n                         tempUnit={day.Temperature.Maximum.Unit}\r\n                         icon={day.Day.Icon}\r\n                         day={new Date(day.EpochDate*1000).toString().slice(0, 3)}\r\n                         date={new Date(day.EpochDate*1000).toString().slice(4,15)} />\r\n            )\r\n        })\r\n    }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DayList;","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { getForcast } from '../../redux/home/home-actions';\r\nimport { selectFavorites } from '../../redux/favorites/favorites-selectors';\r\nimport { selectLocation, selectWeather } from '../../redux/home/home-selectors';\r\nimport { selectIsCelsius } from '../../redux/app/app-selectors';\r\n\r\nimport ToggleUnit from '../ToggleUnit/ToggleUnit'\r\nimport ToggleFavorite from '../ToggleFavorite/ToggleFavorite';\r\nimport DayList from  '../DayList/DayList';\r\n\r\nimport './CurrentWeather.css';\r\n\r\n\r\nconst CurrentWeather = ({getForcast, weather, location, isCelsius, favorites }) => {\r\n   const { currentConditions, fiveDayForcast } = weather;\r\n    let icon;\r\n    currentConditions.length ? icon =  currentConditions[0].WeatherIcon : icon = null;\r\n    if (icon) {\r\n        icon.toString().length < 2 ? icon = '0'+icon : icon = icon;\r\n    }\r\n\r\n    useEffect(() => {\r\n        getForcast(location.Key, isCelsius)\r\n    },[location.Key, isCelsius, getForcast, favorites])\r\n    \r\n    \r\n    return (\r\n   currentConditions.length ?   \r\n     <div id='CurrentWeather-con'>\r\n            <div id='header'>\r\n                    <h3>{location.LocalizedName}, {location.Country.LocalizedName}</h3>\r\n                    <div id='right-box-header'>\r\n                        <ToggleFavorite />\r\n                        <ToggleUnit />\r\n                    </div>\r\n             </div>\r\n            <img alt='icon' src={`https://developer.accuweather.com/sites/default/files/${icon}-s.png`} />\r\n            <h1>{currentConditions[0].WeatherText}</h1>\r\n            {isCelsius ?\r\n        <h4>{Math.round(currentConditions[0].Temperature.Metric.Value)}° Celsius</h4>\r\n        : <h4>{Math.round(currentConditions[0].Temperature.Imperial.Value)}° Fahrenheit</h4>\r\n        }\r\n            \r\n            <div id='five-day-con'>\r\n                <h4>{fiveDayForcast.Headline.Text}</h4>\r\n                <DayList fiveDayForcast={fiveDayForcast} />\r\n            </div>\r\n\r\n        </div> \r\n        : <h1>loading</h1>\r\n    \r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    favorites: selectFavorites(state),\r\n    location: selectLocation(state),\r\n    weather: selectWeather(state),\r\n    isCelsius: selectIsCelsius(state)\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    getForcast: (locationObj, isCelsius) => dispatch(getForcast(locationObj, isCelsius))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CurrentWeather);","import React from 'react';\r\n\r\n\r\nimport SearchField from '../SearchField/SearchField'\r\nimport CurrentWeather from '../CurrentWeather/CurrentWeather';\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div>\r\n            <SearchField />\r\n            <CurrentWeather />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Home;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { setLocation } from '../../redux/home/home-actions';\r\nimport { changeRoute } from '../../redux/app/app-actions';\r\nimport { selectIsCelsius } from '../../redux/app/app-selectors';\r\n\r\nimport './FavCard.css'\r\n\r\nconst FavCard = ({ id, name, country, weatherText, icon, temp, isCelsius, setLocation, changeRoute}) => {\r\n    icon.toString().length < 2 ? icon = '0'+icon : icon = icon;\r\n    return (\r\n        <div id='fav-card' onClick={() => { \r\n            changeRoute('home');\r\n            setLocation({\r\n                Key: id,\r\n                LocalizedName: name,\r\n                Country: { LocalizedName: country}\r\n            })\r\n            }}>\r\n        <div className='card'>\r\n                <h4>{name}, {country}</h4>\r\n                {\r\n                    isCelsius ? \r\n                    <h4>{Math.round(temp.Metric.Value)}° Celsius</h4> :\r\n                    <h4>{Math.round(temp.Imperial.Value)}° Fahrenheit</h4> \r\n                }\r\n                \r\n            <img alt='icon' src={`https://developer.accuweather.com/sites/default/files/${icon}-s.png`}/>\r\n            <h4>{weatherText}</h4>\r\n        </div>            \r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    isCelsius: selectIsCelsius(state)\r\n})\r\n\r\nconst mapDispatchToProps = disptach => ({\r\n    setLocation: (locationObj) => disptach(setLocation(locationObj)),\r\n    changeRoute: (route) => disptach(changeRoute(route))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FavCard);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport FavCard from '../FavCard/FavCard';\r\nimport './FavList.css'\r\n\r\nconst FavList = ({ favoritesWeather, isCelsius, onFavCardClick }) => {\r\n    return (\r\n        <div id='favlist'>\r\n            { favoritesWeather.map(city => {\r\n                return (\r\n                    <FavCard id={city.id}\r\n                             key={city.id}\r\n                             name={city.name}\r\n                             country={city.country}\r\n                             weatherText={city.weatherText}\r\n                             icon={city.icon}\r\n                             temp={city.temp}\r\n                             isCelsius={isCelsius}\r\n                             onFavCardClick={onFavCardClick}/>\r\n                )\r\n            })\r\n            \r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = ({ favorites }) => ({\r\n    favoritesWeather: favorites.favoritesWeather\r\n})\r\n\r\nexport default connect(mapStateToProps)(FavList);","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { selectFavorites } from '../../redux/favorites/favorites-selectors'\r\nimport { getFavoritesWeather } from '../../redux/favorites/favorites-actions';\r\nimport { selectIsCelsius } from '../../redux/app/app-selectors'\r\n\r\nimport ToggleUnit from '../ToggleUnit/ToggleUnit'\r\n\r\nimport FavList from '../FavList/FavList'\r\nimport './Favorites.css'\r\n\r\nconst Favorites = ( { favorites, getFavoritesWeather, isCelsius }) => {\r\n    useEffect(() => {\r\n        getFavoritesWeather(favorites)\r\n    }, [getFavoritesWeather, favorites])\r\n\r\n    return (\r\n        <div>\r\n            <div id='fav-con'>\r\n                <h1>Your Favorites Places</h1>\r\n                <ToggleUnit />\r\n            </div>\r\n            {\r\n                favorites.length ? \r\n                <div id='five-day-con'>\r\n                    <FavList/>\r\n                </div>\r\n                :\r\n                <h1>You have no favorites places yet</h1>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n    favorites: selectFavorites(state),\r\n    isCelsius: selectIsCelsius(state)\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    getFavoritesWeather: (favoritesList) => dispatch(getFavoritesWeather(favoritesList))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Favorites);","import React, { Component } from 'react';\r\n\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n    render() {\r\n        if(this.state.hasError) {\r\n            return  <h1>Someting went wrong</h1>\r\n        }\r\n        return this.props.children\r\n        \r\n        \r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React from 'react';\r\nimport './Footer.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faGithub, faLinkedin } from '@fortawesome/free-brands-svg-icons'\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <div id='footer'>\r\n            <h3>Please note that the app can handle only 50 weather foracst requests a day</h3>\r\n            <div id='social'>\r\n                <a href='https://github.com/yonis9' target='_blank' rel=\"noopener noreferrer\">\r\n                    <FontAwesomeIcon icon={faGithub} size=\"2x\" />\r\n                </a>\r\n                <a href='https://www.linkedin.com/in/yonisisso/' target='_blank' rel=\"noopener noreferrer\">\r\n                    <FontAwesomeIcon icon={faLinkedin} size=\"2x\" />\r\n                </a>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React, { useEffect } from 'react';\nimport { connect} from 'react-redux'\n\nimport { selectRoute, selectLightBackground } from '../redux/app/app-selectors';\nimport { setLocation } from '../redux/home/home-actions'\n\nimport NavBar from '../components/NavBar/NavBar';\nimport ToggleDayNight from '../components/ToggleDayNight/ToggleDayNight';\nimport Home from '../components/Home/Home';\nimport Favorites from '../components/Favorites/Favorites'\nimport ErrorBoundry from '../components/ErrorBoundary/ErrorBoundry';\nimport Footer from '../components/Footer/Footer';\n\nimport './App.css';\n\nconst App = ({ route, lightBackground, setLocation }) => {\n\n  useEffect(() => {\n    if(lightBackground) {\n      document.getElementsByTagName('body')[0].style.backgroundColor = '#f2f2f2';\n      document.getElementsByTagName('body')[0].style.color = '#333';\n    } else {\n      document.getElementsByTagName('body')[0].style.backgroundColor = '#333';\n      document.getElementsByTagName('body')[0].style.color = '#f2f2f2';\n    }\n  }, [lightBackground])\n\n\n  useEffect(() => {\n    getGeolocation()\n  }, [])\n\n  const getGeolocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(requestGeolocation);\n    }\n  }\n\n   const requestGeolocation = (position) => {\n     const lat = position.coords.latitude;\n     const lon= position.coords.longitude;\n     fetch(`http://dataservice.accuweather.com/locations/v1/cities/geoposition/search?apikey=${process.env.REACT_APP_API_KEY}&q=${lat},${lon}`)\n     .then(response=> response.json())\n     .then(data => {\n       setLocation(data)\n     })\n  }\n\n  return (\n    \n    <div className=\"App\">\n      <NavBar />\n      <ErrorBoundry>\n      <ToggleDayNight />\n      {     \n        route === 'home' \n        ? \n        <Home />\n        :\n        <Favorites />\n      } \n        <Footer />\n      </ErrorBoundry>\n    </div>\n  );\n\n}\n\n\nconst mapStateToprops = (state) => ({\n    route: selectRoute(state),\n    lightBackground: selectLightBackground(state)\n})\n\nconst mapDispatchToProps = dispatch => ({\n  setLocation: (locationObj) => dispatch(setLocation(locationObj))\n})\n\nexport default connect(mapStateToprops, mapDispatchToProps)(App);\n","import homeActionTypes from './home-types'\r\nimport DEFAULT_LOCATION from './location-data';\r\n\r\nconst INITIAL_STATE = {\r\n    location: DEFAULT_LOCATION,\r\n    searchOutputs: [],\r\n    isPending: false,\r\n    error: null,\r\n    weather: {\r\n        fiveDayForcast: {},\r\n        currentConditions: []\r\n    }\r\n}\r\n\r\n\r\nconst homeReducer = (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case homeActionTypes.CHANGE_LOCATION:\r\n            return { ...state, location: action.payload }\r\n\r\n        case homeActionTypes.REQUEST_SEARCH_START:\r\n            return { ...state, isPending: true }\r\n\r\n        case homeActionTypes.REQUEST_SEARCH_SUCCESS:\r\n            return { \r\n                ...state,\r\n                searchOutputs: action.payload,\r\n                isPending: false,\r\n                error: null\r\n            }\r\n\r\n        case homeActionTypes.REQUEST_SEARCH_FAILED:\r\n            return { \r\n                ...state,\r\n                isPending: false,\r\n                error: action.payload\r\n            }\r\n\r\n        case homeActionTypes.REQUEST_FORCAST_START:\r\n            return { ...state, isPending: true }\r\n\r\n        case homeActionTypes.REQUEST_FORCAST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                weather: action.payload ,\r\n                isPending: false,\r\n                error: null\r\n\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default homeReducer;","const DEFAULT_LOCATION = { \r\n    Version: 1,\r\n    Key: \"215854\",\r\n    Type: \"City\",\r\n    Rank: 31,\r\n    LocalizedName: \"Tel Aviv\",\r\n    Country: {ID: \"IL\", LocalizedName: \"Israel\"},\r\n    AdministrativeArea: {ID: \"TA\",LocalizedName: \"Tel Aviv\"}\r\n  }\r\n\r\n  export default DEFAULT_LOCATION;","import appActionTypes from './app-types';\r\n\r\nconst INITIAL_STATE = {\r\n    isCelsius: true,\r\n    lightBackground: true,\r\n    route: 'home'\r\n}\r\n\r\nconst appReducer = (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case appActionTypes.TOGGLE_UNIT:\r\n            return { ...state, isCelsius: !state.isCelsius}\r\n\r\n        case appActionTypes.TOGGLE_DAY_NIGHT:\r\n            return { ...state, lightBackground: !state.lightBackground }\r\n\r\n        case appActionTypes.CHANGE_ROUTE:\r\n            return { ...state, route: action.payload }\r\n            \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default appReducer;","\r\n\r\nexport const handleFavorite = (favoriteItem, arrayOfFavorites) => {\r\n    const favorite = arrayOfFavorites.find(f => f.Key === favoriteItem.Key);\r\n    if (favorite) {\r\n        return arrayOfFavorites.filter(f => f.Key !== favoriteItem.Key);\r\n    }\r\n\r\n    return [...arrayOfFavorites, favoriteItem]\r\n}","import favoritesActionTypes from './favorites-types';\r\nimport { handleFavorite } from './favorites-utils'\r\n\r\nconst INITIAL_STATE = {\r\n    favorites: [],\r\n    favoritesWeather: [],\r\n    isPending: false,\r\n    error: null\r\n}\r\n\r\nconst favoritesReducer = (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case favoritesActionTypes.TOGGLE_FAVORITE:\r\n            return { ...state, favorites: handleFavorite(action.payload, state.favorites) }\r\n\r\n        case favoritesActionTypes.GET_FAVORITES_WEATHER_START:\r\n            return { ...state, isPending: true }\r\n\r\n        case favoritesActionTypes.GET_FAVORITES_WEATHER_SUCCESS:\r\n            return { \r\n                ...state,\r\n                favoritesWeather: action.payload,\r\n                isPending: false,\r\n                error: null\r\n            }\r\n\r\n        case favoritesActionTypes.GET_FAVORITES_WEATHER_FAILED:\r\n            return {\r\n                ...state,\r\n                isPending: false,\r\n                error: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default favoritesReducer;","import { combineReducers } from 'redux';\r\nimport { persistReducer } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\n\r\nimport homeReducer from './home/home-reducer';\r\nimport appReducer from './app/app-reducer'\r\nimport favoritesReducer from './favorites/favorites-reducer'\r\n\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n    whitelist: ['favorites']\r\n  }\r\n   \r\n\r\nconst rootReducer = combineReducers({\r\n    app: appReducer,\r\n    home: homeReducer,\r\n    favorites: favoritesReducer\r\n})\r\n\r\nexport default persistReducer(persistConfig, rootReducer)\r\n\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport { persistStore } from 'redux-persist'\r\n\r\n\r\nimport logger from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nimport persistedReducer from './root-reducer';\r\n\r\nconst middlewares = [\r\n    thunkMiddleware\r\n]\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n    middlewares.push(logger)\r\n}\r\n\r\nexport const store = createStore(persistedReducer, applyMiddleware(...middlewares));\r\n\r\nexport const persistor = persistStore(store)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react'\n\nimport './index.css';\nimport App from './containers/App';\n\nimport { store, persistor } from './redux/store';\n\nimport * as serviceWorker from './serviceWorker';\nrequire('dotenv').config()\n\n\n\nReactDOM.render(<Provider store={store}>\n                    <PersistGate persistor={persistor}>\n                        <App />\n                    </PersistGate>\n                </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}